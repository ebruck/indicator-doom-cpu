#!/usr/bin/env python3
APP_LICENCE = '''
Copyright (C) 2014 Edward G. Bruck <ed.bruck1@gmail.com>
Copyright (C) 2017 Andrea Brancaleoni <miwaxe@gmail.com>
Copyright (C) 2019 Andrew Rogers <tuxlovesyou@gmail.com>

This program is free software: you can redistribute it and/or modify it
under the terms of the GNU General Public License version 3, as published
by the Free Software Foundation.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranties of
MERCHANTABILITY, SATISFACTORY QUALITY, or FITNESS FOR A PARTICULAR
PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along
with this program.  If not, see <http://www.gnu.org/licenses/>.
'''
APP_NAME = 'DOOM CPU Indicator'
APP_WEBSITE = 'https://github.com/ebruck/indicator-doom-cpu'
APP_VERSION = '1.0.1'
APP_COPYRIGHT = '\n'.join([c for c in str.splitlines(APP_LICENCE) if c.startswith("Copyright")])
APP_AUTHORS = [a[10:] for a in str.splitlines(APP_LICENCE) if a.startswith("Copyright")]

import os
import time

from gi import require_version
require_version('Gtk', '3.0')

from gi.repository import Gtk, GLib, GObject, GdkPixbuf

try:
    from gi.repository import AppIndicator3 as AppIndicator
    appindicator_imported = True
except ImportError:
    appindicator_imported = False

APP_IMAGES = [os.path.abspath(os.path.dirname(__file__)) + '/icons/1.png',
              os.path.abspath(os.path.dirname(__file__)) + '/icons/2.png',
              os.path.abspath(os.path.dirname(__file__)) + '/icons/3.png',
              os.path.abspath(os.path.dirname(__file__)) + '/icons/4.png',
              os.path.abspath(os.path.dirname(__file__)) + '/icons/5.png',
              os.path.abspath(os.path.dirname(__file__)) + '/icons/6.png']
APP_NUM_IMAGES = len(APP_IMAGES)


# Thanks to: http://www.boduch.ca/2009/02/python-cpu-usage.html
class CPUsage:
    def __init__(self, interval=0.1, percentage=True):
        self.interval = interval
        self.percentage = percentage
        self.result = self.compute()

    def get_time(self):
        stat_file = open('/proc/stat', 'r')
        time_list = stat_file.readline().split(' ')[2:6]
        stat_file.close()
        for i in range(len(time_list)):
            time_list[i] = int(time_list[i])
        return time_list

    def delta_time(self):
        x = self.get_time()
        time.sleep(self.interval)
        y = self.get_time()
        for i in range(len(x)):
            y[i] -= x[i]
        return y

    def compute(self):
        t = self.delta_time()
        if self.percentage:
            result = 100-(t[len(t)-1]*100.00/sum(t))
        else:
            result = sum(t)
        return result

    def __repr__(self):
        return str(self.result)


class AboutDialog(Gtk.AboutDialog):
    def __init__(self):
        global APP_NAME, APP_IMAGES, APP_VERSION, APP_LICENCE, APP_COPYRIGHT, APP_AUTHORS, APP_WEBSITE
        Gtk.AboutDialog.__init__(self)
        self.set_icon_from_file(APP_IMAGES[0])
        self.set_logo(GdkPixbuf.Pixbuf.new_from_file(APP_IMAGES[0]))
        self.set_program_name(APP_NAME)
        self.set_version(APP_VERSION)
        self.set_copyright(APP_COPYRIGHT)
        self.set_license(APP_LICENCE.strip())
        self.set_authors(APP_AUTHORS)
        self.set_artists(['id Software'])
        self.set_website(APP_WEBSITE)
        self.connect('response', lambda self, *args: self.destroy())
        self.show_all()

class AbstractDOOMCPUIndicator(object):
    def __init__(self):
        global APP_IMAGES
        GLib.timeout_add(1000, self.on_update_timer)

        self.menu_item = None
        self.cpu_load_menu_item = None
        self.build_menu()
        self.previous_image_idx = 0
        self.previous_cpu_load = 0
        self.on_update_timer()

    def build_menu(self):
        self.menu = Gtk.Menu()
        self.menu_item = Gtk.MenuItem()
        self.menu.append(self.menu_item)

        self.cpu_load_menu_item = Gtk.MenuItem('CPU: 0%')
        self.cpu_load_menu_item.set_sensitive(False)
        self.menu.append(self.cpu_load_menu_item)

        self.menu.append(Gtk.SeparatorMenuItem())
        menu_item = Gtk.ImageMenuItem.new_from_stock(Gtk.STOCK_ABOUT, None)
        menu_item.connect('activate', self.on_about)
        self.menu.append(menu_item)

        menu_item = Gtk.ImageMenuItem.new_from_stock(Gtk.STOCK_QUIT, None)
        menu_item.connect('activate', self.on_quit)
        self.menu.append(menu_item)
        self.menu.show_all()

    def on_update_timer(self):
        global APP_IMAGES, APP_NUM_IMAGES
        cpu_load = int(CPUsage(interval=0.2).result)
        image_idx = int(cpu_load / (100/(APP_NUM_IMAGES-1)))

        if image_idx != self.previous_image_idx:
            self.set_icon(APP_IMAGES[image_idx])

        if cpu_load != self.previous_cpu_load:
            self.cpu_load_menu_item.set_label('CPU: %d%%' % int(cpu_load))

        self.previous_image_idx = image_idx
        self.previous_cpu_load = cpu_load
        return True

    def on_quit(self, widget):
        Gtk.main_quit()

    def on_about(self, widget):
        AboutDialog()

    def set_icon(self, icon):
        pass

    def run(self):
        Gtk.main()

class DOOMCPUIndicator(AbstractDOOMCPUIndicator):
    def __init__(self):
        self.app_indicator = AppIndicator.Indicator.new(APP_NAME, APP_IMAGES[0],
                                                        AppIndicator.IndicatorCategory.APPLICATION_STATUS)
        AbstractDOOMCPUIndicator.__init__(self)
        self.app_indicator.set_status(AppIndicator.IndicatorStatus.ACTIVE)

    def build_menu(self):
        super(DOOMCPUIndicator, self).build_menu()
        self.app_indicator.set_menu(self.menu)

    def set_icon(self, icon):
        super(DOOMCPUIndicator, self).set_icon(icon)
        self.app_indicator.set_icon(icon)


class DOOMCPUStatusIcon(AbstractDOOMCPUIndicator):
    def __init__(self):
        AbstractDOOMCPUIndicator.__init__(self)
        self.icon_indicator = Gtk.StatusIcon()
        self.icon_indicator.set_from_file(APP_IMAGES[0])
        self.icon_indicator.connect('popup-menu', lambda data, evt, time:
                                                         self.menu.popup(None, None, None, None, evt, time))

    def set_icon(self, icon):
        super(DOOMCPUStatusIcon, self).set_icon(icon)
        self.icon_indicator.set_from_file(icon)

if __name__ == '__main__':
    if appindicator_imported:
        DOOMCPUIndicator().run()
    else:
        DOOMCPUStatusIcon().run()
